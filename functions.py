from langchain_openai import AzureChatOpenAI
import yaml
from langchain_community.agent_toolkits import JsonToolkit, create_json_agent
from langchain_community.tools.json.tool import JsonSpec
from prompts import prefix, suffix, return_system_prompt




llm = AzureChatOpenAI(
    azure_endpoint="https://firstsenseai.openai.azure.com",
    azure_deployment="gpt-4o",
    api_version="2024-02-15-preview",
    api_key="a823ef8205364125a194795f870da84c",
    temperature=0,
    max_tokens=None,
)


def return_system(claim):
    system = return_system_prompt + f"""`Claim`: {claim}
    """
    
    
    return system


def initial_checks(claim):
    """
    The claim should be initially processed using the `initial_checks tool`, and
    the result from this tool should then be passed to the `create_agent tool`.

    Args:
        claim (str): A string representation of the claim.

    Returns:
        str: The processed claim to be passed on to the create_agent tool.
    """
    print("Initial Check Agent")
    

    res = llm.invoke(return_system(claim)).content

    # return res + f"\n{claim}" 
    return res


def final(claim):
    """
    Create an agent to extract relevant information from Timely Filing Document.

    Args:
        claim (str): The Claim to be processed by the agent.

    Returns:
        str: The response generated by the agent based on the provided query.
    """
    print("#####Timely Filing Tool#####")

    with open("json-files/Timely Filing Requirements by State Job Aid.json") as f:
        data = yaml.load(f, Loader=yaml.FullLoader)
    json_spec = JsonSpec(dict_=data, max_value_length=4000)
    json_toolkit = JsonToolkit(spec=json_spec)

    json_agent_executor = create_json_agent(
        handle_parsing_errors=True,
        prefix=prefix, 
        suffix=suffix, 
        llm=llm, 
        toolkit=json_toolkit, 
        verbose=True
        
    )

    response = json_agent_executor.invoke("Process the state mentioned for timely filing of claims: " + claim)

    return response