import os
import yaml
import difflib
from pprint import pp as print
from langchain_community.agent_toolkits import JsonToolkit, create_json_agent
from langchain_community.tools.json.tool import JsonSpec
from langchain_core.tools import tool
from langgraph.prebuilt import create_react_agent
from prompts import prefix, suffix, sys, system_message
from functions import llm


@tool
def create_agent(file_path: str, query: str) -> str:
    """
    Create an agent to extract relevant information from a specified document.
    This function initializes an agent with the document located at the given
    file path and processes the query to extract information related
    to it. The agent will analyze the content of the document to identify
    relevant responses based on the query.

    Args:
        file_path (str): The path to the document file that the agent will analyze.
        query (str): The query to be processed by the agent.

    Returns:
        str: The response generated by the agent based on the provided query.
             This may include relevant information or references from the document.
    """
    print("#####CREATE AGENT TOOL#####")
    print(f"File Name: {file_path}, Claim: {query}")

    with open(file_path, "r", encoding="utf-8") as f:
        data = yaml.load(f, Loader=yaml.FullLoader)
    json_spec = JsonSpec(dict_=data, max_value_length=4000)
    json_toolkit = JsonToolkit(spec=json_spec)

    json_agent_executor = create_json_agent(
        handle_parsing_errors=True,
        prefix=prefix,
        suffix=suffix,
        llm=llm,
        toolkit=json_toolkit,
        verbose=True,
    )

    response = json_agent_executor.invoke(
        query
        + "\n\nNote: Return the final answer in a readable format without adding any information."
    )

    return response


@tool
def get_file_path(query: str) -> str:
    """
    Use this function when "Refer to the..." in the Answer."

    Args:
        query (str): Answer that contains a reference to a document.

    Returns:
        str: The file path of the document being referenced.
    """
    print("###GET FILE NAME TOOL###")
    directory_path = "json-files"
    json_files = [
        file
        for root, dirs, files in os.walk(directory_path)
        for file in files
        if file.endswith((".json"))
    ]

    normalized_text = query.lower()

    return f"json-files/{difflib.get_close_matches(normalized_text, json_files, n=1, cutoff=0.0)[0]}"


messages = []


@tool
def guide(query: str) -> str:
    """
    Always use this tool before returning the Final Answer.

    Args:
        query (str): A string containing the input or query about the claim.

    Returns:
        str: An instruction for the next tool usage.
    """
    print("###Guide Tool###")
    messages.append(("human", query))
    ai_message = llm.invoke(messages).content
    messages.append(("ai", ai_message))
    return ai_message


tools = [guide, create_agent, get_file_path]

langgraph_agent_executor = create_react_agent(llm, tools, state_modifier=system_message)